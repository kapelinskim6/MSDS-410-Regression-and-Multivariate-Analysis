-*- R -*-
# Mike Kapelinski
# Predict 410
# Data Analysis Assignment #2


require(ggplot2)
require(moments)
require(stats)
library(Hmisc)
library(car)

path.name <- 'C:\\Users\\mike\\Desktop\\Predict_410\\';

# Read in csv file for Ames housing data;
file.name <- paste(path.name,'ames_housing_data.csv',sep='');

# Create a Dataframe ames.df
ames.df <- read.csv(file.name,header=TRUE,stringsAsFactors=FALSE);

# Show the head of the data frame;
head(ames.df)

# Print entire DF as a string
str(ames.df)


# Create a waterfall of drop conditions;
ames.df$dropCondition <- ifelse(ames.df$BldgType!='1Fam','01: Not SFR',
                         ifelse(ames.df$SaleCondition!='Normal','02: Non-Normal Sale',
                         ifelse(ames.df$Street!='Pave','03: Street Not Paved',
                         ifelse(ames.df$YearBuilt <1950,'04: Built Pre-1950',
                         ifelse(ames.df$TotalBsmtSF <1,'05: No Basement',
                         ifelse(ames.df$GrLivArea <800,'06: LT 800 SqFt',
                         ifelse(ames.df$LotArea >70000,'07: GT 70000 SqFt',
                         ifelse(ames.df$TotRmsAbvGrd >11,'08: GT 11 Rooms Total',
                         ifelse(ames.df$FullBath <1,'09: GT 0 Bathroom',  
                         ifelse(ames.df$GrLivArea >3000,'10: Above Lvng Area LT 3000',
                         '99: Eligible Sample'
                          ))))))))));


# Save the table
waterfall <- table(ames.df$dropCondition);

# Format the table as a column matrix for presentation;
as.matrix(waterfall,10,1)


# Eliminate all observations that are not part of the eligible sample population;
eligible.population <- subset(ames.df,dropCondition=='99: Eligible Sample');

# Check that all remaining observations are eligible;
table(eligible.population$dropCondition);

keep.vars <- c('SID','PID','LotFrontage','LotArea','LotConfig','Neighborhood',
               'HouseStyle','OverallQual','OverallCond','YearBuilt','YearRemodel','Exterior1',
               'BsmtFinSF1','BsmtFinSF2','CentralAir','GrLivArea','BsmtFullBath','BsmtHalfBath',
               'FullBath','HalfBath','BedroomAbvGr','TotRmsAbvGrd','Fireplaces','GarageCars',
               'GarageArea','WoodDeckSF','OpenPorchSF','EnclosedPorch','ThreeSsnPorch',
               'ScreenPorch','PoolArea','MoSold','YrSold','SaleCondition', 'SalePrice');

# Note that the R data frame is a (rectabgular) list object which means that it can be 
# accessed in two ways - as a matrix or as a list;
# Note that the keep.vars are the COLUMNS that we want to keep, not the rows;

skinny.df <- eligible.population[,keep.vars];

# Use the structure command to view the contents of the data frame;
str(skinny.df)


sample.df <- na.omit(skinny.df);

# Check the change in dimension;
dim(skinny.df)
dim(sample.df)

dim(skinny.df)-dim(sample.df)


# Define total square footage
sample.df$TotalSqftCalc <- sample.df$BsmtFinSF1+sample.df$BsmtFinSF2+sample.df$GrLivArea;

# Define total bathrooms
sample.df$TotalBathCalc <- sample.df$BsmtFullBath + 0.5*sample.df$BsmtHalfBath ++
  + sample.df$FullBath + 0.5*sample.df$HalfBath;


# Corner lot indicator
# ifelse(condition,valueTrue,valueFalse)
sample.df$CornerLotInd <- ifelse(sample.df$LotConfig=='Corner',1,0);

# Check how the indicator is assigned
table(sample.df$CornerLotInd,sample.df$LotConfig)

# Define two indicators for fire places
table(sample.df$Fireplaces)

# Intercept Adjustment for a single fireplace
sample.df$FireplaceInd1 <- ifelse((sample.df$Fireplaces>0)&(sample.df$Fireplaces<2),1,0);
table(sample.df$FireplaceInd1,sample.df$Fireplaces)

# Intercept Adjustment for 2 or more fireplaces
sample.df$FireplaceInd2 <- ifelse((sample.df$Fireplaces>1),1,0);
table(sample.df$FireplaceInd2,sample.df$Fireplaces)

# Additive Intercept Adjustment for a single fireplace
sample.df$FireplaceAdder1 <- ifelse((sample.df$Fireplaces>0),1,0);

# Additive Intercept Adjustment for 2 or more fireplaces
sample.df$FireplaceAdder2 <- ifelse((sample.df$Fireplaces>1),1,0);

table(sample.df$FireplaceAdder1,sample.df$Fireplaces)
table(sample.df$FireplaceAdder2,sample.df$Fireplaces)



# Central Air Indicator
sample.df$CentralAirInd <- ifelse(sample.df$CentralAir=='Y',1,0);
table(sample.df$CentralAirInd) 
# Looks like this is not useful since almost all homes have central air


# Exterior Siding Type
sample.df$BrickInd <- ifelse(sample.df$Exterior1=='BrkFace',1,0);
sample.df$VinylSidingInd <- ifelse(sample.df$Exterior1=='VinylSd',1,0);

# Pool Indicator
sample.df$PoolInd <- ifelse(sample.df$PoolArea>0,1,0);

# Wood Deck Indicator
sample.df$WoodDeckInd <- ifelse(sample.df$WoodDeckSF>0,1,0);

# Porch Indicator - Open Porch OR Screen Porch
sample.df$PorchInd <- ifelse((sample.df$OpenPorchSF>0)||(sample.df$ScreenPorch>0),1,0);

# Quality Index
sample.df$QualityIndex <- sample.df$OverallQual*sample.df$OverallCond;

table(sample.df$QualityIndex)


# Year Sold Indicators
sample.df$I2006 <- ifelse(sample.df$YrSold==2006,1,0);
sample.df$I2007 <- ifelse(sample.df$YrSold==2007,1,0);
sample.df$I2008 <- ifelse(sample.df$YrSold==2008,1,0);
sample.df$I2009 <- ifelse(sample.df$YrSold==2009,1,0);
sample.df$I2010 <- ifelse(sample.df$YrSold==2010,1,0);

table(sample.df$YrSold)
table(sample.df$I2006)
table(sample.df$I2007)
table(sample.df$I2008)
table(sample.df$I2009)
table(sample.df$I2010)


# List out sample.df
str(sample.df)

sample.df$u <- runif(n=dim(sample.df)[1],min=0,max=1);
sample.df$train <- ifelse(sample.df$u<0.70,1,0);


# Technically we should perform our EDA on the training data set
train.df <- subset(sample.df,train==1);

# Save the R data frame as an .RData object
saveRDS(sample.df,file='C:\\Users\\mike\\Desktop\\Predict_410\\ames_sample.RData');

# Read (or reload) the .RData object as an R data frame
sample.df <- readRDS('C:\\Users\\mike\\Desktop\\Predict_410\\ames_sample.Rdata');

# Check it
str(sample.df)



str(train.df)


# Check the counts on the train/test split
table(sample.df$train)

# Check the train/test split as a percentage of whole
table(sample.df$train)/dim(sample.df)[1]


plot(train.df$TotalSqftCalc,train.df$SalePrice/1000, col="black", xlab="Total Sqft", ylab="Sale Price (000)",
main = "SalePrice by Total Sqft")
abline(lm(train.df$SalePrice/1000 ~ train.df$TotalSqftCalc), col = "red", lwd =
         2, lty = 2)
lines(lowess(train.df$TotalSqftCalc, train.df$SalePrice/1000),
      col = "blue", lwd = 2, lty = 1)

# BOxplot of Neighborhood vs. Sale Price (using las)
boxplot(train.df$SalePrice/1000 ~ train.df$Neighborhood,ylab='Sale Price (000)',las=2)
title('Sale Price By Neighborhood')

plot(train.df$TotalBathCalc,train.df$SalePrice/1000)

# Fit a linear regression model with R
model.1 <- lm(SalePrice/1000 ~ TotalSqftCalc, data=train.df)
model.1L <- lm(Log_Sale ~ TotalSqftCalc, data=train.df)

# Display model summary
summary(model.1)
summary(model.1L)
table(summary(model.1))
# List out components of lm object
names(model.1)

# Access a component of lm object
model.1$coefficients

# Access residuals to compute Mean Square Error (MSE) and Mean Absolute Error (MAE)
mse.1 <- mean(model.1$residuals^2)
mae.1 <- mean(abs(model.1$residuals))


# BASE R diagnostic plot for lm object
plot(model.1)

# Not too useful for writing a report

# Panel the plots
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
plot(model.1)

# Are these the diagnostic plots that we want?
# What diagnostic plots are of primary interest to us?
# What plots are most useful for validating model assumptions (for inference)?

# Hint:  We need to check the assumptions of normality and homoscedasticity;
# (1) QQ Plot
# (2) Scatterplot of residuals versus predictor


# Use the Base R functon qqplot() to assess the normality of the residuals
qqnorm(model.1$residuals, col="darkred")
qqline(model.1$residuals)

qqnorm(model.1L$residuals, col="darkred")
qqline(model.1L$residuals)

# Make a scatterplot
plot(train.df$TotalSqftCalc,model.1L$residuals, xlab="Total Sqft", ylab="Residuals", col="darkblue")
title('Residual vs Predictor')
# Do we detect any issues here?

# Use the function qqPlot() in the car package to assess the Studentized residuals
qqPlot(model.1)

# Note that this is not the typical QQ plot.  Also note that the Studentized residuals
# have a different distribution than the standard residuals.


# Cook's Distance Plot
influenceIndexPlot(model.1,vars=c('Cook','hat'))

# Note that the x index is not correct.  They are the row labels from the original
# data frame.

rownames(train.df) <- seq(1,length(model.1$residuals),1)
model.1 <- lm(SalePrice ~ TotalSqftCalc, data=train.df)
influenceIndexPlot(model.1,vars=c('Cook','hat'))


plot(train.df$TotalSqftCalc, train.df$SalePrice/1000, main="TotalSqftCalc vs Sale Price", 
     xlab="TotalSqftCalc", ylab="SalePrice (000)", col="darkblue")
abline(lm(train.df$SalePrice/1000 ~ train.df$TotalSqftCalc), col = "red", lwd =2, lty = 2)
lines(lowess(train.df$TotalSqftCalc, train.df$SalePrice/1000),col = "green", lwd = 2, lty = 1)


# Simple regression Total Rooms model
t = lm(SalePrice ~ TotRmsAbvGrd, data=train.df)
       summary(t)
       
plot(train.df$TotRmsAbvGrd, train.df$SalePrice)

# Simple regression Total Bath model
w = lm(SalePrice ~ LotArea, data=train.df)
summary(w)


# Model 2 
model.2 = lm(SalePrice ~ train.df$GarageArea, data=train.df)
summary(model.2)

model.2L = lm(Log_Sale ~ train.df$GarageArea, data=train.df)
summary(model.2)

plot(train.df$GarageArea, train.df$SalePrice/1000, main="GarageArea vs Sale Price", 
     xlab="Garage Area", ylab="SalePrice (000)", col="darkblue")
abline(lm(train.df$SalePrice/1000 ~ train.df$GarageArea), col = "red", lwd =2, lty = 2)
lines(lowess(train.df$GarageArea, train.df$SalePrice/1000),col = "green", lwd = 2, lty = 1)

qqnorm(model.2$residuals, col="darkred")
qqline(model.2$residuals)

qqnorm(model.2L$residuals, col="darkred")
qqline(model.2L$residuals)

# Make a scatterplot
plot(train.df$GarageArea,model.2$residuals, xlab="Garage Area", ylab="Residuals", col="darkblue")
title('Residual vs Predictor')

plot(train.df$GarageArea,model.2L$residuals, xlab="Garage Area", ylab="Residuals", col="darkblue")
title('Residual vs Predictor')

# Describe variable Garage area 
describe(train.df$GarageArea)

summary(train.df$TotalSqftCalc)
c = describe((train.df$TotalSqftCalc))
str(c)


model.3 = lm(SalePrice ~ TotalSqftCalc + GarageArea, data=train.df)
   summary(model.3)

plot(train.df$TotalSqftCalc + train.df$GarageArea, model.3$residuals, xlab="Garage Area + TotalSqFtCalc",
     ylab="Residuals", col="darkblue",title('Residual vs Predictor'))

plot(model.3)

plot(m)

qqnorm(model.3$residuals, col="darkred")
qqline(model.3$residuals)


Log_Sale = log(train.df$SalePrice)


model.2L = lm(Log_Sale ~ train.df$GarageArea, data=train.df)
summary(model.2L)

plot(train.df$GarageArea, Log_Sale, main="GarageArea vs Sale Price", 
     xlab="Garage Area", ylab="Log SalePrice", col="darkblue")
abline(lm(Log_Sale ~ train.df$GarageArea), col = "red", lwd =2, lty = 2)
lines(lowess(train.df$GarageArea, Log_Sale),col = "green", lwd = 2, lty = 1)

qqnorm(model.2$residuals, col="darkred")
qqline(model.2$residuals)

# Make a scatterplot
plot(train.df$GarageArea,model.2$residuals, xlab="Garage Area", ylab="Residuals", col="darkblue")
title('Residual vs Predictor')

# Describe variable Garage area 
describe(train.df$GarageArea)

summary(train.df$TotalSqftCalc)
c = describe((train.df$TotalSqftCalc))
str(c)


model.3 = lm(SalePrice ~ TotalSqftCalc + GarageArea, data=train.df)
summary(model.3)

model.3L = lm(Log_Sale~ TotalSqftCalc + GarageArea, data=train.df)
summary(model.3L)

plot(train.df$TotalSqftCalc + train.df$GarageArea, model.3L$residuals, xlab="Garage Area + TotalSqFtCalc",
     ylab="Residuals", col="darkblue",title('Residual vs Predictor'))



qqnorm(model.3$residuals, col="darkred")
qqline(model.3$residuals)

